Sender: LSF System <lsfadmin@n318>
Subject: Job 13037018: <adig_ips> in cluster <mk2> Done

Job <adig_ips> was submitted from host <login4> by user <rcunning> in cluster <mk2>.
Job was executed on host(s) <n318>, in queue <general>, as user <rcunning> in cluster <mk2>.
</nethome/rcunning> was used as the home directory.
</scratch/projects/crf/pdam-genome/fastOrtho/Adig_specific> was used as the working directory.
Started at Tue Oct  3 10:28:48 2017
Results reported on Tue Oct  3 11:40:07 2017

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
#!/bin/bash
#BSUB -J adig_ips
#BSUB -o %J.out
#BSUB -e %J.err
#BSUB -q general
#BSUB -P crf
#

module load blast
module load java/1.8.0_60
module load R/3.3.1

export _JAVA_OPTIONS=''

cd /scratch/projects/crf/pdam-genome/fastOrtho/Adig_specific && make

------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   19962.10 sec.
    Max Memory :                                 6314 MB
    Average Memory :                             3929.30 MB
    Total Requested Memory :                     1500.00 MB
    Delta Memory :                               -4814.00 MB
    Max Swap :                                   11915 MB
    Max Processes :                              24
    Max Threads :                                114

The output (if any) follows:

R --vanilla < ../../R/Diversification.R --args Adig_specific.txt

R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(stringr)
> library(tidyverse)
> 
> args = commandArgs(trailingOnly=TRUE)
> 
> dat <- read.delim("../ortho.table",header=F,sep="\t")
> colnames(dat) <- c("Group", "Genes", "Taxa", "IDs")
> dat5 <- filter(dat, Taxa>=1)
> dim(dat5) #23380
[1] 29115     4
> 
> counts <- data.frame(matrix(nrow=nrow(dat5),ncol=11))
> rownames(counts) <- dat5$Group
> colnames(counts) <- c("Pdam","Spis","Adig","Ofav","Ampl","Disc","Aipt","Nema","Hydr","Mnem","Amph")
> 
> counts$Pdam <- apply(dat5,1,function(x) str_count(x[4],"Pocillopora"))
> counts$Spis <- apply(dat5,1,function(x) str_count(x[4],"Stylophora"))
> counts$Adig <- apply(dat5,1,function(x) str_count(x[4],"Acropora"))
> counts$Ofav <- apply(dat5,1,function(x) str_count(x[4],"Orbicella"))
> counts$Ampl <- apply(dat5,1,function(x) str_count(x[4],"Amplexidiscus"))
> counts$Disc <- apply(dat5,1,function(x) str_count(x[4],"Discosoma"))
> counts$Aipt <- apply(dat5,1,function(x) str_count(x[4],"Aiptasia"))
> counts$Nema <- apply(dat5,1,function(x) str_count(x[4],"Nematostella"))
> counts$Hydr <- apply(dat5,1,function(x) str_count(x[4],"Hydra"))
> counts$Mnem <- apply(dat5,1,function(x) str_count(x[4],"Mnemiopsis"))
> counts$Amph <- apply(dat5,1,function(x) str_count(x[4],"Amphimedon"))
> 
> ###Groupings
> coral <- 1:4
> morph <- 5:6
> anem <- 7:8
> hyd <- 9
> out <- 10:11
> cnid <- c(coral,morph,anem,hyd)
> 
> 
> coralMin <- apply(counts[,coral],1,min)
> length(which(coralMin>0)) #7962 found in all corals (core coral genome)
[1] 7536
> anemMin <- apply(counts[,anem],1,min)
> cnidMin <- apply(counts[,cnid],1,min)
> length(which(cnidMin>0)) #found in all cnidarians 2367
[1] 2348
> noncorMax <- apply(counts[,-c(coral)],1,max)
> nonanemMax <- apply(counts[,-anem],1,max)
> length(which(coralMin>0 & noncorMax==0)) #in corals only 370
[1] 278
> length(which(anemMin>0 & nonanemMax==0)) #in anemones only 495
[1] 483
> 
> noncorcnidMax <- apply(counts[,c(morph,anem,hyd)],1,max)
> length(which(coralMin>0 & noncorcnidMax==0)) #387
[1] 292
> nonanemcnidMax <- apply(counts[,c(morph,coral,hyd)],1,max)
> length(which(anemMin>0 & nonanemcnidMax==0)) #535
[1] 517
> 
> coralMax <- apply(counts[,coral],1,max)
> noncorcnidMin <- apply(counts[,c(morph,anem,hyd)],1,min)
> length(which(coralMax==0 & noncorcnidMin>0)) #Lost in corals 1
[1] 0
> 
> anemMax <- apply(counts[,anem],1,max)
> nonanemcnidMin <- apply(counts[,c(morph,coral,hyd)],1,min)
> length(which(anemMax==0 & nonanemcnidMin>0)) #Lost in anemones 5
[1] 7
> 
> coreCoral <- counts[coralMin>0,]
> coralOnly <- counts[coralMin>0 & noncorMax==0,]
> 
> ###Species-specific genes
> k=1
> pdam <- counts[,k]
> nonpdam <- apply(counts[,-k],1,max)
> length(which(pdam>0 & nonpdam==0)) #560 in pdam only
[1] 345
> pdamOnly <- dat[which(pdam>0 & nonpdam==0),]
> 
> if (args[1]=="Pdam_specific.txt") write.table(pdamOnly,"Pdam_specific.txt",quote=F,row.names=F,col.names=T,sep="\t")
> coralOnly <- dat[which(coralMin>0 & noncorMax==0),]
> if (args[1]=="Coral_specific.txt") write.table(coralOnly, "Coral_specific.txt",quote=F,row.names=F,col.names=T,sep="\t")
> 
> # Spis-specific
> spis <- counts[,2]
> nonspis <- apply(counts[,-2],1,max)
> length(which(spis>0 & nonspis==0))
[1] 441
> spisOnly <- dat[which(spis>0 & nonspis==0),]
> if (args[1]=="Spis_specific.txt") write.table(spisOnly, "Spis_specific.txt",quote=F,row.names=F,col.names=T,sep="\t")
> 
> # Ofav-specific
> ofav <- counts[,4]
> nonofav <- apply(counts[,-4],1,max)
> length(which(ofav>0 & nonofav==0))
[1] 1565
> ofavOnly <- dat[which(ofav>0 & nonofav==0),]
> if (args[1]=="Ofav_specific.txt") write.table(ofavOnly, "Ofav_specific.txt",quote=F,row.names=F,col.names=T,sep="\t")
> 
> # Adig-specific
> adig <- counts[,3]
> nonadig <- apply(counts[,-3],1,max)
> length(which(adig>0 & nonadig==0))
[1] 772
> adigOnly <- dat[which(adig>0 & nonadig==0),]
> if (args[1]=="Adig_specific.txt") write.table(adigOnly, "Adig_specific.txt",quote=F,row.names=F,col.names=T,sep="\t")
> 
> ###Diversification in corals
> anth <- apply(counts[,c(coral,morph,anem)],1,min)
> pgens <- counts[which(anth>0),]
> divp <- c()
> for (i in 1:nrow(pgens)) {
+ #	print(i)
+ 	g1 <- sum(pgens[i,1:3])
+ 	g2 <- sum(pgens[i,4:7])
+ 	n1 <- sum(pgens[-i,1:3])
+ 	n2 <- sum(pgens[-i,4:7])
+ 	divp[i] <- fisher.test(cbind(c(g1,g2),c(n1,n2)))$p.value
+ }
> divadj <- p.adjust(divp,method="fdr")
> dir <- apply(pgens,1,function(x) mean(x[1:3])-mean(x[4:7]))
> divs <- pgens[divadj<0.01 & dir>0,]
> pdivGens <- dat[dat$Group%in%rownames(divs),]
> if (args[1]=="CoralDiversified.txt") write.table(pdivGens,"CoralDiversified.txt",quote=F,row.names=F,col.names=T,sep="\t")
> 
> 
# Remove existing fasta files (will be rewritten here)
rm -f *.fasta && rm -f ORTHOMCL* \
	# Write each Adig-specific gene family to ORTHOMCL* file with list of member genes
tail -n +2 Adig_specific.txt | awk '{f=$1; $1=$2=$3=""; sub("   ", ""); gsub("\\([^\\)]+\\)", ""); ; gsub(" ", "\n"); print > f}'
# Get all sequences in all families
# Combine lists of genes in all ortholog groups
cat ORTHOMCL* > ORTHOMCL_cat
filter_fasta.py \
	-f ../../data/ref/AcroporaDigitifera.pep \
	-o Adig_specific_all.fasta \
	-s ORTHOMCL_cat
# Remove asterisks (A digitifera has asterisks in protein seqs for stop codons)
sed -i 's/\*//g' Adig_specific_all.fasta
interproscan.sh -i Adig_specific_all.fasta -b Adig_specific_ips --goterms
03/10/2017 14:29:34:683 Welcome to InterProScan-5.24-63.0
03/10/2017 14:29:42:027 Running InterProScan v5 in STANDALONE mode... on Linux
03/10/2017 14:29:53:093 Loading file /scratch/projects/crf/pdam-genome/fastOrtho/Adig_specific/Adig_specific_all.fasta
03/10/2017 14:29:53:096 Running the following analyses:
[CDD-3.14,Coils-2.2.1,Gene3D-4.1.0,Hamap-201701.18,MobiDBLite-1.0,PANTHER-11.1,Pfam-31.0,PIRSF-3.02,PRINTS-42.0,ProDom-2006.1,ProSitePatterns-20.132,ProSiteProfiles-20.132,SFLD-2,SMART-7.1,SUPERFAMILY-1.75,TIGRFAM-15.0]
Available matches will be retrieved from the pre-calculated match lookup service.

Matches for any sequences that are not represented in the lookup service will be calculated locally.
2017-10-03 14:29:53,762 [amqEmbeddedWorkerJmsContainer-1] [uk.ac.ebi.interpro.scan.business.sequence.BerkeleyPrecalculatedProteinLookup:350] WARN - 

The version of InterProScan you are using is 5.24-63.0
The version of the lookup service you are using is 5.25-64.0
As the data in these versions is not the same, you cannot use this match lookup service.
InterProScan will now run locally
If you would like to use the match lookup service, you have the following options:
i) Download the newest version of InterProScan5 from our FTP site by following the instructions on:
   https://www.ebi.ac.uk/interpro/interproscan.html
ii) Download the match lookup service for your version of InterProScan from our FTP site and install it locally.
    You will then need to edit the following property in your configuration file to point to your local installation:
    precalculated.match.lookup.service.url=

In the meantime, the analysis will continue to run locally.


03/10/2017 14:38:14:433 25% completed
03/10/2017 15:02:40:448 50% completed
03/10/2017 15:13:19:261 75% completed
03/10/2017 15:37:18:200 90% completed
03/10/2017 15:39:15:003 98% completed
03/10/2017 15:40:07:106 100% done:  InterProScan analyses completed
grep -o "GO:......." Adig_specific_ips.gff3 > Adig_specific_goterms.txt
cat Adig_specific_goterms.txt | sort | uniq -c | awk '{ print $2 " " $1}' > Adig_specific_goterms_counts.txt


PS:

Read file <13037018.err> for stderr output of this job.

